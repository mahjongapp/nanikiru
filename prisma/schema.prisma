// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
    id Int @id  @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title String
    body String
    imgurl String
    choices Choice[]
    answers Answer[]
    user User @relation(fields: [userId], references: [id])
    userId String
    blurDataURL String?
}

model Choice {
    id Int @id @default(autoincrement())
    name String
    post Post @relation(fields: [postId], references: [id])
    postId Int
    answers Answer[]
}

model Answer {
    id Int @id @default(autoincrement())
    body String
    post Post @relation(fields: [postId], references: [id])
    postId Int
    choice Choice @relation(fields: [choiceId], references: [id])
    choiceId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id])
    userId String
    comments Comment[]
}

model Comment {
    id String @id @default(cuid())
    body String
    user User @relation(fields: [userId], references: [id])
    userId String
    answerId Int
    answer Answer @relation(fields: [answerId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts Post[]
  answers Answer[]
  comments Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
