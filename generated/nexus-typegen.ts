/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/lib/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  choiceInput: { // input type
    name: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Answer: { // root type
    body: string; // String!
    choiceId: number; // Int!
    id: number; // Int!
    postId: number; // Int!
  }
  Choice: { // root type
    id: number; // Int!
    name: string; // String!
    postId: number; // Int!
  }
  Mutation: {};
  Post: { // root type
    body: string; // String!
    id: number; // Int!
    imgurl: string; // String!
    title: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Answer: { // field return type
    body: string; // String!
    choice: NexusGenRootTypes['Choice'] | null; // Choice
    choiceId: number; // Int!
    id: number; // Int!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number; // Int!
  }
  Choice: { // field return type
    id: number; // Int!
    name: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    postId: number; // Int!
  }
  Mutation: { // field return type
    createAnswer: NexusGenRootTypes['Answer']; // Answer!
    createPost: NexusGenRootTypes['Post']; // Post!
  }
  Post: { // field return type
    body: string; // String!
    choices: Array<NexusGenRootTypes['Choice'] | null> | null; // [Choice]
    id: number; // Int!
    imgurl: string; // String!
    title: string; // String!
  }
  Query: { // field return type
    hello: string | null; // String
    post: NexusGenRootTypes['Post']; // Post!
    posts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
  }
}

export interface NexusGenFieldTypeNames {
  Answer: { // field return type name
    body: 'String'
    choice: 'Choice'
    choiceId: 'Int'
    id: 'Int'
    post: 'Post'
    postId: 'Int'
  }
  Choice: { // field return type name
    id: 'Int'
    name: 'String'
    post: 'Post'
    postId: 'Int'
  }
  Mutation: { // field return type name
    createAnswer: 'Answer'
    createPost: 'Post'
  }
  Post: { // field return type name
    body: 'String'
    choices: 'Choice'
    id: 'Int'
    imgurl: 'String'
    title: 'String'
  }
  Query: { // field return type name
    hello: 'String'
    post: 'Post'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createAnswer: { // args
      body: string; // String!
      choiceId: number; // Int!
      postId: number; // Int!
    }
    createPost: { // args
      body: string; // String!
      choices: NexusGenInputs['choiceInput'][]; // [choiceInput!]!
      imgurl: string; // String!
      title: string; // String!
    }
  }
  Query: {
    post: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}